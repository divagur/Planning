<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        DPmnrxAgAAAAAICAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAAAIAAAAApa0PIqWv
        DP+lsAzXpbAKSgAAAAD//wABqqoABgAAAACnsA43pa8M/6WvDP+nsA43AAAAAKqqAAb//wABAAAAAKSv
        CkmkrwzWpa8M/6WtDyIAAAAAgIAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAQAA
        AAClrQgfpbALcba2AAcAAAAAqqoAA4CAAAKAgAACAAAAAKWvDjalrwz/pa8M/6WvDjYAAAAAgIAAAoCA
        AAKqqgADAAAAALa2AAelsAtxpa0IHwAAAAD//wABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//8AAaqqAAMAAAAAAAAAAAAAAAAAAAAAv78ABKWvCjOnsQo0v78ABAAA
        AAAAAAAAAAAAAAAAAACqqgAD//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKqqAAP//wABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wABqqoAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAgAACgIAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>